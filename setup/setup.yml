---
- hosts: local
  gather_facts: false
  vars_files:
    - config.yml
    - "{{ vault }}"
  tasks:
    - name: Enable brew bundle tap
      homebrew_tap: name="homebrew/bundle"
      environment:
        HOMEBREW_NO_ANALYTICS: 1
        HOMEBREW_NO_INSECURE_REDIRECT: 1
        HOMEBREW_CASK_OPTS: "--appdir=/Applications --fo ntdir=/Library/Fonts"
      
    - name: Check if brew has updates
      shell: brew bundle check --file="{{ dotfiles }}/packages/brew"
      register: result_brew_bundle
      ignore_errors: true
      changed_when: false

    - name: Install and upgrade brew packages
      shell: brew bundle install --file="{{ dotfiles }}/packages/brew"
      when: result_brew_bundle is failed 
      register: result_brew_packages
      environment:
        HOMEBREW_NO_ANALYTICS: 1
        HOMEBREW_NO_INSECURE_REDIRECT: 1
        HOMEBREW_CASK_OPTS: "--appdir=/Applications --fontdir=/Library/Fonts"

    - name: Cleanup brew packages
      shell: brew cleanup
      when: result_brew_packages.changed 
      
    - name: Enable brew PATH in GUI
      command: launchctl config user path '/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin'
      changed_when: false
      become: true
      become_user: root

    - name: Install pip packages
      pip: requirements="{{ dotfiles }}/packages/pip" state=latest executable=pip3 extra_args="--user"
      environment:
        PIP_REQUIRE_VIRTUALENV: ""

    - name: Install npm packages
      npm: name="{{ item }}" global=true production=true state=present
      with_lines: "cat {{ dotfiles }}/packages/npm"

    - name: Install vscode packages
      shell: code --install-extension "{{ item }}"
      with_lines: "cat {{ dotfiles }}/packages/vscode"
      register: result_vscode
      changed_when: "'Installing...' in result_vscode.stdout_lines"
  
    - name: Install custom keyboard layouts
      copy: src="keylayouts/{{ item }}" dest="{{ userhome }}/Library/Keyboard Layouts/"
      with_items:
        - "ABC with Umlauts.icns"
        - "ABC with Umlauts.keylayout"

    - name: Check if Paragon NTFS has been installed
      stat: path="/Applications/NTFS for Mac.app"
      register: result_paragon_ntfs
      changed_when: false
      ignore_errors: true

    - name: Open Paragon NTFS installer
      command: open "/usr/local/Caskroom/paragon-ntfs/15/FSInstaller.app"
      when: not result_paragon_ntfs.stat.exists

    - name: Fix Wireshark permissions
      file: path="{{ item }}" mode=0644
      with_items:
        - /etc/manpaths.d/Wireshark
        - /etc/paths.d/Wireshark
      become: true
      become_user: root
      
    - name: Setup dotfiles
      shell: cd "/Users/{{ ansible_user }}/.dotfiles/" && ./dotfiles.sh
      register: result_dotfiles
      changed_when: "'LINK' in result_dotfiles.stdout_lines"
    
    - name: Setup cloudflared
      template: src="cloudflared/config.jinja2" dest="/usr/local/etc/cloudflared/config.yml"
      notify:
        - Restart cloudflared
    
    - name: Enable cludflared
      shell: cloudflared service install
      become: True
      become_user: root

    - name: Update dns resolver
      shell: networksetup -setdnsservers "{{ item }}" 127.0.0.1
      with_items: "{{ settings.cloudflared.interfaces|default('Wi-Fi') }}"
      become: true
      become_user: root

    - name: Set shell
      user: shell="{{ settings.shell|default('/bin/bash') }}" name="{{ ansible_user }}"
      become: true
      become_user: root

    - name: Set hostname
      shell: >
            systemsetup -setcomputername "{{ inventory_hostname_short }}";
            scutil --set ComputerName "{{ inventory_hostname_short }}";
            scutil --set HostName "{{ inventory_hostname_short }}";
            scutil --set LocalHostName "{{ inventory_hostname_short }}";
      changed_when: false
      become: true
      become_user: root

    - name: Set netbios name
      osx_defaults: domain="/Library/Preferences/SystemConfiguration/com.apple.smb.server" key="NetBIOSName" value="{{ inventory_hostname_short }}"
      become: true
      become_user: root

    - name: Set vscode file associations
      command: duti -s "com.microsoft.VSCode" .{{ item }} all
      changed_when: false
      with_items: "{{ settings.extensions.vscode|default('md') }}"

    - name: Set vscode as default for plain text files
      command: duti -s "com.microsoft.VSCode" public.plain-text all
      changed_when: false
      with_items: "{{ settings.extensions.vscode|default('md') }}"

    - name: Set IINA file associations
      command: duti -s "com.colliderli.iina" .{{ item }} all
      changed_when: false
      with_items: "{{ settings.extensions.iina|default('mp3') }}"

    - name: Setup macOS defaults
      script: ./defaults.sh
      when: settings.setup_defaults|default(false)
      notify:
        - Restart dock

  handlers:
    - name: Restart cloudflared
      command: launchctl stop com.cloudflare.cloudflared && launchctl start com.cloudflare.cloudflared
      become: True
      become_user: root

    - name: Restart dock
      shell: killall Dock
  
- hosts: vm
  gather_facts: false
  vars_files:
    - config.yml
    - "{{ vault|default('~/.dotfiles/setup/vault.dist.yml') }}"
  tasks:
    - name: Check if host is running if not skip setup
      wait_for: host="{{ ansible_host }}" port=5986 timeout=3 delay=1
      ignore_errors: true
      register: result_host_alive
      changed_when: result_host_alive|bool
      delegate_to: localhost

    - name: Install chocolatey packages
      # Note: Ansible installs chocolatey automatically if not present
      win_chocolatey: name="{{ vm.packages.chocolatey }}" state=present
      become_user: Administrator
      become_method: runas
      when: not result_host_alive is failed

    - name: Upgrade chocolatey packages
      win_chocolatey: name=all state=latest
      when: not result_host_alive is failed

    - name: Set hostname
      win_domain_membership: domain_admin_user="{{ ansible_user }}" domain_admin_password="{{ ansible_password }}" hostname="{{ inventory_hostname_short }}" state=workgroup workgroup_name=WORKGROUP
      when: not result_host_alive is failed

    - name: Enable firewall
      win_firewall:
        state: enabled
        profiles:
          - Domain
          - Private
          - Public
      when: not result_host_alive is failed and vm.settings.enable_firewall|default(false)
    
    - name: Create script destination
      win_file: path='C:\Temp\Win10Settings' state=directory
      become_user: Administrator
      become_method: runas
      when: not result_host_alive is failed

    - name: Get script
      win_get_url: follow_redirects=all dest='C:\Temp\Win10Settings.zip' url='https://github.com/Disassembler0/Win10-Initial-Setup-Script/archive/{{ vm.settings.setup_script.version }}.zip'
      become_user: Administrator
      become_method: runas
      when: not result_host_alive is failed
    
    - name: Unzip script
      win_unzip: delete_archive=yes src='C:\Temp\Win10Settings.zip' dest='C:\Temp\Win10Settings'
      become_user: Administrator
      become_method: runas
      when: not result_host_alive is failed
    
    - name: Set custom settings via setup script
      win_command: powershell.exe -NoProfile -ExecutionPolicy Bypass -File Win10.ps1 -include Win10.psm1 "{{ item }}"
      args:
        chdir: 'C:\Temp\Win10Settings\Win10-Initial-Setup-Script-{{ vm.settings.setup_script.version }}'
      with_flattened: "{{ vm.settings.setup_script.presets }}"
      become_user: Administrator
      become_method: runas
      when: not result_host_alive is failed
    
    - name: Set wallpaper
      win_regedit: path='{{ item.path }}' name='{{ item.name }}' data='{{ item.data }}' type='string'
      with_items:
        - {path: 'HKCU:\Control Panel\Desktop', name: 'Wallpaper', data: '' }
        - {path: 'HKCU:\Control Panel\Colors', name: 'Background', data: '000' }
      when: not result_host_alive is failed
    
    - name: Disable lockscreen background
      win_regedit: path='HKLM:\Software\Policies\Microsoft\Windows\System' name='DisableLogonBackgroundImage' data='1' type='dword'
      when: not result_host_alive is failed